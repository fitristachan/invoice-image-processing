{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"pip install torch torchvision matplotlib opencv-python\npip install ultralytics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom torchvision import transforms\nfrom PIL import Image\nfrom yolov5 import YOLOv5\n\n# Load YOLOv5 pretrained model\nfrom ultralytics import YOLO\nmodel = YOLO(\"/kaggle/input/fix_model/other/default/1/best.pt\")\n\n# Load image\nimg_path = \"your_image.jpg\"\nimg = Image.open(img_path).convert('RGB')\ntransform = transforms.ToTensor()\ninput_tensor = transform(img).unsqueeze(0)\n\n# Get intermediate layer\ntarget_layer = model.model[4]  # contoh: layer ke-4 Conv layer\n\n# Hook to get gradients and activations\nactivations = []\ngradients = []\n\ndef forward_hook(module, input, output):\n    activations.append(output)\n\ndef backward_hook(module, grad_input, grad_output):\n    gradients.append(grad_output[0])\n\ntarget_layer.register_forward_hook(forward_hook)\ntarget_layer.register_backward_hook(backward_hook)\n\n# Forward pass\noutput = model(input_tensor)\n\n# Ambil prediksi kelas tertinggi\npred = output.xyxy[0]  # xyxy, confidence, class\nif len(pred) == 0:\n    print(\"Tidak ada deteksi\")\n    exit()\n\n# Backward pass pada skor tertinggi\ntop_conf = pred[0][4]\ntop_conf.backward(retain_graph=True)\n\n# Dapatkan grad dan activation\ngrads_val = gradients[0].squeeze().detach().cpu().numpy()\nacts_val = activations[0].squeeze().detach().cpu().numpy()\n\n# Grad-CAM calculation\nweights = np.mean(grads_val, axis=(1, 2))\ncam = np.zeros(acts_val.shape[1:], dtype=np.float32)\n\nfor i, w in enumerate(weights):\n    cam += w * acts_val[i, :, :]\n\ncam = np.maximum(cam, 0)\ncam = cv2.resize(cam, (img.width, img.height))\ncam -= cam.min()\ncam /= cam.max()\n\n# Overlay heatmap\nheatmap = cv2.applyColorMap(np.uint8(255 * cam), cv2.COLORMAP_JET)\nimg_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\noverlay = cv2.addWeighted(img_cv, 0.5, heatmap, 0.5, 0)\n\n# Tampilkan hasil\ncv2.imshow(\"Grad-CAM on YOLOv8\", overlay)\ncv2.waitKey(0)\ncv2.destroyAllWindows()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}