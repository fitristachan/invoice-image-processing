{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Text Extraction\n\nusing easyocr\n\nsupport bahasa indonesia and english","metadata":{}},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"# %pip install albumentations\n# %pip install numpy\n# %pip install Pillow","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T08:21:05.890382Z","iopub.execute_input":"2025-04-17T08:21:05.890749Z","iopub.status.idle":"2025-04-17T08:21:09.469512Z","shell.execute_reply.started":"2025-04-17T08:21:05.890721Z","shell.execute_reply":"2025-04-17T08:21:09.468440Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (11.1.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import albumentations\nimport numpy as np\nfrom PIL import Image","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T08:21:16.499375Z","iopub.execute_input":"2025-04-17T08:21:16.500191Z","iopub.status.idle":"2025-04-17T08:21:16.505501Z","shell.execute_reply.started":"2025-04-17T08:21:16.500160Z","shell.execute_reply":"2025-04-17T08:21:16.504253Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"#resize\n#brightness adjustment\n#contrass adjusment\ndef preprocess(image: Image.Image):\n    augment = A.Compose([\n            A.Resize(height=600, width=600),\n            A.BrightnessContrast(p=0.2),\n            # A.\n            ], bbox_params=A.BboxParams(format='pascal_voc'))\n\n    image_np = np.array(image.convert(\"RGB\"))\n    # Pastikan augmentasi tidak mengubah ke CHW\n    augmented = augment(image=image_np)\n    augmented_image = augmented[\"image\"]\n        \n    # Jika masih CHW (3, 600, 600), transpose ke HWC\n    if augmented_image.shape[0] == 3:\n        augmented_image = np.transpose(augmented_image, (1, 2, 0))  # CHW â†’ HWC\n        \n    return augmented_image  # Shape: (600, 600, 3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T08:21:29.927899Z","iopub.execute_input":"2025-04-17T08:21:29.928231Z","iopub.status.idle":"2025-04-17T08:21:29.934437Z","shell.execute_reply.started":"2025-04-17T08:21:29.928206Z","shell.execute_reply":"2025-04-17T08:21:29.933540Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"#Passing the image classification model\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"reader = easyocr.Reader(['en', 'id'])\n\ndef is_receipt(text):\n    text_lower = text.lower()\n\n    if 'total' or 'amount' or 'jumlah' and 'price' or 'harga' in text_lower:\n        print(\"This is a valid receipt.\")\n    else:\n        print(\"This is not a valid receipt.\")\n\n\ndef process_image(image):\n    # Convert PIL Image to numpy array\n    image_np = np.array(image)\n    if image_np.dtype != np.uint8:\n        image_np = (image_np * 255).astype(np.uint8)  # Normalisasi jika float64\n\n    # Extract text using EasyOCR\n    results = reader.readtext(image_np)\n\n    # Combine all detected text into a single string\n    extracted_text = ' '.join([result[1] for result in results])\n\n    # Check if the extracted text is a receipt\n    is_receipt(extracted_text)\n\n    print(\"Extracted Text:\")\n    print(extracted_text)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}