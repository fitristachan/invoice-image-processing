{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":351376,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":293272,"modelId":313909},{"sourceId":353020,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":294498,"modelId":315119}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %pip install numpy\n# %pip install Pillow\n# %pip install opencv-python\n# %pip install matpotlib\n# %pip install easyocr\n# %pip install tensorflow\n# %pip install tensorflow.keras\n# %pip install datasets","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:12.019826Z","iopub.execute_input":"2025-04-25T03:26:12.020586Z","iopub.status.idle":"2025-04-25T03:26:12.025186Z","shell.execute_reply.started":"2025-04-25T03:26:12.020553Z","shell.execute_reply":"2025-04-25T03:26:12.024204Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load Image","metadata":{}},{"cell_type":"code","source":"from io import BytesIO\nfrom datasets import load_dataset\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport cv2\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:12.026097Z","iopub.execute_input":"2025-04-25T03:26:12.026441Z","iopub.status.idle":"2025-04-25T03:26:15.152168Z","shell.execute_reply.started":"2025-04-25T03:26:12.026384Z","shell.execute_reply":"2025-04-25T03:26:15.151252Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dataset = load_dataset(\"naver-clova-ix/cord-v2\", split=\"test\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:15.154293Z","iopub.execute_input":"2025-04-25T03:26:15.154817Z","iopub.status.idle":"2025-04-25T03:26:55.532352Z","shell.execute_reply.started":"2025-04-25T03:26:15.154794Z","shell.execute_reply":"2025-04-25T03:26:55.529631Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# image_path = '/content/' + image\n# image = Image.open(image_path).convert(\"RGB\")\nimage = dataset[0]['image']  # Sudah dalam bentuk PIL.Image\nimage = image.convert(\"RGB\")  # Pastikan formatnya RGB\n\nif isinstance(image, Image.Image):\n    image_np = np.array(image)\nelse:\n    image_np = image\n\nplt.figure(figsize=(12, 12))\nplt.imshow(cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB))\nplt.axis('off')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:55.536790Z","iopub.execute_input":"2025-04-25T03:26:55.539088Z","iopub.status.idle":"2025-04-25T03:26:56.665683Z","shell.execute_reply.started":"2025-04-25T03:26:55.538906Z","shell.execute_reply":"2025-04-25T03:26:56.664754Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"# def preprocess_for_ocr(image: Image.Image):\n#     image_np = np.array(image)\n#     gray = cv2.cvtColor(image_np, cv2.COLOR_RGB2GRAY)\n\n#     h, w = gray.shape\n#     if w < 600:\n#         scale_factor = 600 / w\n#         gray = cv2.resize(gray, (600, int(h * scale_factor)))\n\n#     # Brightness & contrast adjustment\n#     alpha, beta = 1.2, 30\n#     adjusted = cv2.convertScaleAbs(gray, alpha=alpha, beta=beta)\n\n#     # Denoising\n#     denoised = cv2.fastNlMeansDenoising(adjusted, h=10)\n\n#     # Sharpening\n#     blurred = cv2.GaussianBlur(denoised, (0, 0), 3)\n#     sharpened = cv2.addWeighted(denoised, 1.5, blurred, -0.5, 0)\n\n#     # Thresholding (Otsu lebih cocok di kasusmu)\n#     # _, processed = cv2.threshold(sharpened, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n#     processed = cv2.adaptiveThreshold(sharpened, 255,\n#                                       cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n#                                       cv2.THRESH_BINARY, 15, 5)\n\n#     return processed\n\ndef preprocess_for_ocr(image: Image.Image):\n    image_np = np.array(image)\n    gray = cv2.cvtColor(image_np, cv2.COLOR_RGB2GRAY)\n    h, w = gray.shape\n    if w < 600:\n        scale_factor = 600 / w\n        gray = cv2.resize(gray, (600, int(h * scale_factor)))\n    adjusted = cv2.convertScaleAbs(gray, alpha=1.1, beta=20)\n    return adjusted\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:56.667344Z","iopub.execute_input":"2025-04-25T03:26:56.667860Z","iopub.status.idle":"2025-04-25T03:26:57.428162Z","shell.execute_reply.started":"2025-04-25T03:26:56.667826Z","shell.execute_reply":"2025-04-25T03:26:57.426598Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Preprocessing\nprocessed = preprocess_for_ocr(image)\nprocessed_rgb = cv2.cvtColor(processed, cv2.COLOR_BGR2RGB)\n\nplt.figure(figsize=(12, 12))\nplt.imshow(cv2.cvtColor(processed_rgb, cv2.COLOR_BGR2RGB))\nplt.axis('off')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:57.429453Z","iopub.execute_input":"2025-04-25T03:26:57.429783Z","iopub.status.idle":"2025-04-25T03:26:57.814957Z","shell.execute_reply.started":"2025-04-25T03:26:57.429749Z","shell.execute_reply":"2025-04-25T03:26:57.814063Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# OCR","metadata":{}},{"cell_type":"code","source":"import easyocr\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.preprocessing.image import img_to_array","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:26:57.815998Z","iopub.execute_input":"2025-04-25T03:26:57.816284Z","iopub.status.idle":"2025-04-25T03:27:32.930333Z","shell.execute_reply.started":"2025-04-25T03:26:57.816261Z","shell.execute_reply":"2025-04-25T03:27:32.929465Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Jalankan OCR dulu\nreader = easyocr.Reader(['en', 'id'])\nresults = reader.readtext(processed_rgb)\n\n# Ambil semua hasil teks\nocr_texts = [text.lower() for (_, text, conf) in results if conf > 0.5]\n\n# Kata kunci yang wajib ada\nkeywords = [\"total\", \"amount\", \"jumlah\", \"subtotal\", \"grandtotal\"]\n\nprint(\"results: \", ocr_texts)\n\n# Cek apakah ada salah satu dari keywords\nif not any(any(keyword in text for keyword in keywords) for text in ocr_texts):\n    print(\"Maaf, gambar yang dimasukkan bukan gambar struk ataupun invoice belanja!\")\nelse:\n    print(\"Gambar valid, lanjut ke proses klasifikasi...\")\n    # Lanjutkan ke proses crop, resize, prediksi CNN dsb.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:27:32.931467Z","iopub.execute_input":"2025-04-25T03:27:32.932181Z","iopub.status.idle":"2025-04-25T03:27:43.647798Z","shell.execute_reply.started":"2025-04-25T03:27:32.932151Z","shell.execute_reply":"2025-04-25T03:27:43.646850Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Detect class","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nimport kagglehub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:27:43.650252Z","iopub.execute_input":"2025-04-25T03:27:43.650634Z","iopub.status.idle":"2025-04-25T03:27:43.726192Z","shell.execute_reply.started":"2025-04-25T03:27:43.650611Z","shell.execute_reply":"2025-04-25T03:27:43.725524Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"if isinstance(image, Image.Image):\n    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)\nelse:\n    image_np = image.copy()\n\n# Load the model with custom_objects\nmodel_path = '/kaggle/input/model_checkpoint_resnet50v2/keras/default/1/model_checkpoint_resnet50V2.keras'\nmodel = load_model(\n    model_path,\n    custom_objects={'mse': 'mse'}\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:27:43.726987Z","iopub.execute_input":"2025-04-25T03:27:43.727213Z","iopub.status.idle":"2025-04-25T03:27:46.600118Z","shell.execute_reply.started":"2025-04-25T03:27:43.727195Z","shell.execute_reply":"2025-04-25T03:27:46.599344Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"DOC_TYPE = 1\n# Preprocessing gambar\nimage_resized = cv2.resize(processed_rgb, (600, 600))  # Resize sesuai dengan input model\nimage_array = img_to_array(image_resized) / 255.0  # Normalisasi\nimage_array = np.expand_dims(image_array, axis=0)  # Tambahkan batch dimension\n\n# Prepare document type input\ndoc_type_input = np.array([[DOC_TYPE]])\n        \n# Masukkan gambar ke model\nprediction_outputs = model.predict([image_array, doc_type_input])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:27:46.601745Z","iopub.execute_input":"2025-04-25T03:27:46.602062Z","iopub.status.idle":"2025-04-25T03:28:27.711617Z","shell.execute_reply.started":"2025-04-25T03:27:46.602031Z","shell.execute_reply":"2025-04-25T03:28:27.710780Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import string\n\ncharacters = string.ascii_letters + string.digits + \" -.:,\"\nchar_to_index = {c: i + 1 for i, c in enumerate(characters)}  # index 0 reserved for padding\nindex_to_char = {i + 1: c for i, c in enumerate(characters)}\nvocab_size = len(characters) + 1\n\n# # Cek karakter untuk index 63 dan 67\n# print(\"Karakter untuk index 63:\", index_to_char.get(63))\n# print(\"Karakter untuk index 67:\", index_to_char.get(67))\n\n# # Cek seluruh vocabulary\n# print(\"Full vocabulary mapping:\", index_to_char)\n\ndef decode_predictions(raw_output):\n    # Unpack dengan benar - asumsi urutan: items, quantities, prices, totals\n    items_logits = raw_output[0]    # shape (1, 10, 20, 68)\n    quantities_logits = raw_output[1] # shape (1, 10, 20, 68)\n    prices_logits = raw_output[2]    # shape (1, 10, 20, 68)\n    totals_logits = raw_output[3]    # shape (1, 1, 20, 68)\n\n    def decode_sequence(logits, is_total=False):\n        \"\"\"\n        logits: array dengan shape (1, N, 20, 68)\n        is_total: flag khusus untuk field 'totals'\n        \"\"\"\n        # Hilangkan batch dimension\n        logits = logits[0]  # shape sekarang (N, 20, 68)\n        \n        decoded_texts = []\n        for sequence in logits:  # loop tiap sequence\n            # Ambil index dengan nilai tertinggi\n            char_indices = sequence.argmax(axis=-1)  # shape (20,)\n            print(char_indices)\n            \n            # Konversi ke karakter\n            text = ''.join([index_to_char.get(int(idx), '') for idx in char_indices if idx != 0])\n            decoded_texts.append(text.strip())\n        \n        return decoded_texts[0] if is_total else decoded_texts\n\n    return {\n        'items': decode_sequence(items_logits),\n        'quantities': decode_sequence(quantities_logits),\n        'prices': decode_sequence(prices_logits),\n        'total_prices': decode_sequence(totals_logits, is_total=True)\n    }\n    \ndecoded = decode_predictions(prediction_outputs)\nprint(\"Items:\", str(decoded['items']))\nprint(\"Quantities:\", str(decoded['quantities']))\nprint(\"Prices:\", str(decoded['prices']))\nprint(\"Total:\", str(decoded['total_prices']))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T04:20:40.738270Z","iopub.execute_input":"2025-04-25T04:20:40.738517Z","iopub.status.idle":"2025-04-25T04:20:40.826747Z","shell.execute_reply.started":"2025-04-25T04:20:40.738496Z","shell.execute_reply":"2025-04-25T04:20:40.825663Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# print(prediction_outputs)\nprint(\"Jumlah output:\", len(prediction_outputs))\nprint(\"Tipe tiap output:\", [type(x) for x in prediction_outputs])\nprint(\"Shape tiap output:\")\nfor i, arr in enumerate(prediction_outputs):\n    print(f\"Output {i}: {arr.shape}\")\n# items_logits, quantities_logits, prices_logits, totals_logits = prediction_outputs\n# print(item_logits)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:52:55.534046Z","iopub.execute_input":"2025-04-25T03:52:55.534362Z","iopub.status.idle":"2025-04-25T03:52:55.543315Z","shell.execute_reply.started":"2025-04-25T03:52:55.534339Z","shell.execute_reply":"2025-04-25T03:52:55.542234Z"}},"outputs":[],"execution_count":null}]}